trigger:
  - main
  - develop

pool:
  vmImage: ubuntu-20.04

variables:
  buildConfiguration: Release
  organization: jailtonjunior94
  projectKey: JailtonJunior94_csharp-finances
  projectName: csharp-finances
  imageName: finance-api

stages:
  - stage: Build
    displayName: Build
    jobs:
      - job: Build
        displayName: Build
        steps:
          - script: dotnet restore
            displayName: Restoring Packages

          - script: dotnet build --configuration $(buildConfiguration)
            displayName: Building Project

          - task: DotNetCoreCLI@2
            displayName: Running unit tests
            inputs:
              command: test
              projects: "**/*Tests.csproj"
              arguments: --configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=opencover --logger trx
              publishTestResults: true

          - task: reportgenerator@4
            displayName: ReportGenerator
            inputs:
              reports: $(Build.SourcesDirectory)/test/**/coverage.opencover.xml
              targetdir: $(Build.SourcesDirectory)/CodeCoverage
              assemblyfilters: -xunit*

          - task: PublishCodeCoverageResults@1
            displayName: Publish code coverage
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: $(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml
              reportDirectory: $(Build.SourcesDirectory)/CodeCoverage

          - task: SonarCloudPrepare@1
            displayName: Sonar Prepare
            inputs:
              SonarCloud: Sonar_Cloud
              organization: $(organization)
              scannerMode: 'MSBuild'
              projectKey: $(projectKey)
              projectName: $(projectName)
              extraproperties: | 
                sonar.exclusions=**/obj/**,**/*.dll
                sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/**/coverage.opencover.xml
                sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx
            
          - script: dotnet build --configuration $(buildConfiguration)
            displayName: Building Project
  
          - task: SonarCloudAnalyze@1
            displayName: Sonar Analyse
  
          - task: SonarCloudPublish@1
            displayName: Sonar Publish
            inputs:
              pollingTimeoutSec: 300

          - task: Docker@2
            displayName: Login to ACR
            inputs:
              command: login
              containerRegistry: ACR_CONNECTION
  
          - task: Docker@2
            displayName: Docker Build and Push (ACR)
            inputs:
              buildContext: .
              containerRegistry: ACR_CONNECTION
              repository: $(imageName)
              command: buildAndPush
              Dockerfile: "**/Dockerfile"
              tags: |
                  $(Build.BuildId)
                  latest

          - task: PublishPipelineArtifact@1
            displayName: Publish Manifest k8s
            inputs:
              artifactName: manifests
              path: .k8s

  - stage: Deploy
    displayName: Deploy to Microsoft Azure (AKS)
    dependsOn: 
      - Build
    jobs:
      - deployment: DeployAzure
        environment: DeployAzure
        strategy:
          runOnce:
            deploy:
              steps:
                - task: KubernetesManifest@0
                  displayName: Deploy to Kubernetes cluster (AKS)
                  inputs:
                    action: deploy
                    manifests: |
                      $(Pipeline.Workspace)/manifests/deployment.yml
                      $(Pipeline.Workspace)/manifests/service.yml
                      
  # - stage: DockerECR
  #   displayName: Docker Build and Push (ECR)
  #   jobs:
  #     - job: Docker
  #       steps:
  #         - script: |
  #             aws ecr get-login-password --region $(AWS_REGION) | docker login --username AWS --password-stdin $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION).amazonaws.com
  #           displayName: 'Login to AWS'
  #           env:
  #             AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
  #             AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
    
  #         - task: Docker@2
  #           displayName: Build docker image
  #           inputs:
  #             buildContext: .
  #             repository: $(AWS_ACCOUNT_ID).dkr.ecr.us-east-1.amazonaws.com/$(imageName)
  #             command: buildAndPush
  #             Dockerfile: "**/Dockerfile"
  #             tags: |
  #               $(Build.BuildId)
  #               latest